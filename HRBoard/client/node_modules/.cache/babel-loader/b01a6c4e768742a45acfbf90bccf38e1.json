{"ast":null,"code":"import Api from \"./api\";\nimport { SERVER_URL } from \"./constants/apiUrl\";\n\nclass HTTPService extends Api {\n  constructor() {\n    super();\n    this.request = this.request.bind(this);\n    this.makeObject = this.makeObject.bind(this);\n    this.makeDeepFreeze = this.makeDeepFreeze.bind(this);\n  }\n  /**\n   *\n   *\n   * @private\n   * @description 불변 객체 생성(서버 결과값 수정 불가능하게) - 재귀적으로 돈다\n   * @param {{ [key: string]: any }} target\n   * @returns {{ [key: string]: any }}\n   * @memberof HTTPService\n   */\n\n\n  makeDeepFreeze(target) {\n    if (target && typeof target === \"object\" && !Object.isFrozen(target)) {\n      Object.freeze(target);\n      Object.keys(target).forEach(key => this.makeDeepFreeze(target[key]));\n    }\n\n    return target;\n  }\n  /**\n   *\n   *\n   *  @private\n   * 2@description res.data와 더불어서 만약 헤더에서 가져와야할 값들을 추출하여, 같이 object에 담은 배열 리턴\n   * - object 타입이 아닌 경우에는 singleRes라는 심볼 프로퍼티에 담아준다.\n   * 불변성을 확보 하기 위해서 만약 서버 응답에 대한 처리를 수정할 수 있게 해주면 나중에 서버쪽 응답의 문제로 생각할 수 있기에\n   * @template T\n   * @param {Readonly<AxiosResponse<T>>} res\n   * @param {Array<string>} searchHeader\n   * @returns\n   * @memberof HTTPService\n   */\n\n\n  makeObject(res, searchHeader) {\n    let headerRes = {};\n    searchHeader.forEach(item => {\n      headerRes[`${item}`] = res.headers[`${item}`];\n    });\n    let obj = Object.keys(headerRes).length > 0 ? {\n      data: res.data,\n      headers: headerRes\n    } : {\n      data: res.data\n    }; // return obj;\n\n    return this.makeDeepFreeze(obj);\n  }\n  /**\n   *\n   * @public\n   * @template T\n   * @param {Partial<IrequestParam>} {\n   *     method = \"get\",\n   *     host = SERVER_URL[`${Object.keys(SERVER_URL)[0]}`],\n   *     url = \"\",\n   *     data = {},\n   *     options = {},\n   *     headers = {},\n   *     searchHeaders = [],\n   *   }\n   * @returns {Readonly<{ [key: string]: any }>}\n   * @memberof HTTPService\n   */\n\n\n  request({\n    method = \"get\",\n    host = SERVER_URL[`${Object.keys(SERVER_URL)[0]}`],\n    url = \"\",\n    data = {},\n    options = {},\n    headers = {},\n    searchHeaders = []\n  }) {\n    try {\n      return this.ajax(method, host, url, data, headers, options).then(res => this.makeObject(res, searchHeaders)).catch(e => {\n        throw new Error(typeof e === \"object\" ? JSON.stringify(e) : \"\" + e);\n      });\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n\n}\n\nexport default new HTTPService();","map":{"version":3,"sources":["/Users/sangheon/Documents/portfolio/dribble/HRBoard/client/src/services/HTTPService.ts"],"names":["Api","SERVER_URL","HTTPService","constructor","request","bind","makeObject","makeDeepFreeze","target","Object","isFrozen","freeze","keys","forEach","key","res","searchHeader","headerRes","item","headers","obj","length","data","method","host","url","options","searchHeaders","ajax","then","catch","e","Error","JSON","stringify","console","error"],"mappings":"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","sourcesContent":["import { AxiosError, AxiosResponse } from \"axios\";\nimport Api from \"./api\";\nimport { SERVER_URL } from \"./constants/apiUrl\";\n\nexport interface IrequestParam {\n  /**\n   *  API 요청 메소드\n   * (default: 'get')\n   * */\n  method: \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\n  /**\n   * 호스트 고정 URL\n   * (default : (constants/url.ts)에 첫번째로 지정한 프로퍼티)\n   * */\n  host: string;\n  /**\n   * 나머지 URL\n   * default: '',  호스트 URL의 루트 도메인으로 직접 요청하지 않는 이상 넣어주세요\n   * */\n  url: string;\n  /**\n   * Data 보낼 형식  (request body에 들어갈 것)\n   * (default: Empty Object Literal)\n   * GET이나 DELETE 요청시에는 자동으로 queryString으로 변환\n   */\n  data: { [key: string]: any };\n  /**\n   * request Header에 넣을 값 예시 {token: '1234'}\n   *  (default: Empty Object Literal) - {})\n   */\n  headers: { [key: string]: any };\n  /**\n   * 요청 content-type 변경시에 사용을 권장 (기본 request payload 변경)\n   * (default: Empty Object Literal) - {})\n   */\n  options: { [key: string]: any };\n  /**\n   * response Header에서 빼올 값들 문자열 배열로 지정\n   * (default: Empty Array Literal) - [])\n   */\n  searchHeaders: Array<string> | [];\n}\n\nclass HTTPService extends Api {\n  constructor() {\n    super();\n\n    this.request = this.request.bind(this);\n    this.makeObject = this.makeObject.bind(this);\n    this.makeDeepFreeze = this.makeDeepFreeze.bind(this);\n  }\n\n  /**\n   *\n   *\n   * @private\n   * @description 불변 객체 생성(서버 결과값 수정 불가능하게) - 재귀적으로 돈다\n   * @param {{ [key: string]: any }} target\n   * @returns {{ [key: string]: any }}\n   * @memberof HTTPService\n   */\n  private makeDeepFreeze(target: { [key: string]: any }): { [key: string]: any } {\n    if (target && typeof target === \"object\" && !Object.isFrozen(target)) {\n      Object.freeze(target);\n\n      Object.keys(target).forEach((key) => this.makeDeepFreeze(target[key]));\n    }\n\n    return target;\n  }\n\n  /**\n   *\n   *\n   *  @private\n   * 2@description res.data와 더불어서 만약 헤더에서 가져와야할 값들을 추출하여, 같이 object에 담은 배열 리턴\n   * - object 타입이 아닌 경우에는 singleRes라는 심볼 프로퍼티에 담아준다.\n   * 불변성을 확보 하기 위해서 만약 서버 응답에 대한 처리를 수정할 수 있게 해주면 나중에 서버쪽 응답의 문제로 생각할 수 있기에\n   * @template T\n   * @param {Readonly<AxiosResponse<T>>} res\n   * @param {Array<string>} searchHeader\n   * @returns\n   * @memberof HTTPService\n   */\n  private makeObject<T>(res: Readonly<AxiosResponse<T>>, searchHeader: Array<string>) {\n    let headerRes: { [key: string]: any } = {};\n\n    searchHeader.forEach((item: string) => {\n      headerRes[`${item}`] = res.headers[`${item}`];\n    });\n\n    let obj = Object.keys(headerRes).length > 0 ? { data: res.data, headers: headerRes } : { data: res.data };\n    // return obj;\n    return this.makeDeepFreeze(obj);\n  }\n\n  /**\n   *\n   * @public\n   * @template T\n   * @param {Partial<IrequestParam>} {\n   *     method = \"get\",\n   *     host = SERVER_URL[`${Object.keys(SERVER_URL)[0]}`],\n   *     url = \"\",\n   *     data = {},\n   *     options = {},\n   *     headers = {},\n   *     searchHeaders = [],\n   *   }\n   * @returns {Readonly<{ [key: string]: any }>}\n   * @memberof HTTPService\n   */\n  request<T>({\n    method = \"get\",\n    host = SERVER_URL[`${Object.keys(SERVER_URL)[0]}`],\n    url = \"\",\n    data = {},\n    options = {},\n    headers = {},\n    searchHeaders = [],\n  }: Partial<IrequestParam>): Readonly<{ [key: string]: any }> {\n    try {\n      return this.ajax(method, host, url, data, headers, options)\n        .then((res: Readonly<AxiosResponse<T>>) => this.makeObject<T>(res, searchHeaders))\n        .catch((e: Readonly<AxiosError<T>>) => {\n          throw new Error(typeof e === \"object\" ? JSON.stringify(e) : \"\" + e);\n        });\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n}\n\nexport default new HTTPService();\n"]},"metadata":{},"sourceType":"module"}