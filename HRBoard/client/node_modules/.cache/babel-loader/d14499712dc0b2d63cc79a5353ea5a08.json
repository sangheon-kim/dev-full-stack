{"ast":null,"code":"import { all, put, takeEvery, takeLatest, delay, select } from \"redux-saga/effects\";\nimport { ASYNC_DECREASE, ASYNC_INCREASE, DECREASE, INCREASE } from \"./Counter.store\";\n/********************************************************************************\n *  Generate Function\n ********************************************************************************/\n\nfunction* asyncIncreaseGen() {\n  // yield delay(3000);\n  const number = yield select(state => state.Counter.number);\n  console.log(number);\n  yield put({\n    type: INCREASE\n  });\n}\n\nfunction* asyncDecreaseGen() {\n  yield delay(3000);\n  yield put({\n    type: DECREASE\n  });\n} // export function* watchDecrease() {\n//   while (true) {\n//     yield take(ASYNC_DECREASE);\n//     yield fork(asyncDecreaseGen);\n//   }\n// }\n\n/********************************************************************************\n *  watch\n ********************************************************************************/\n\n\nexport const counterSaga = function* () {\n  yield all([yield takeLatest(ASYNC_INCREASE, asyncIncreaseGen), yield takeEvery(ASYNC_DECREASE, asyncDecreaseGen)]);\n};","map":{"version":3,"sources":["/Users/sangheon/Documents/portfolio/dribble/HRBoard/client/src/Store/Counter/Counter.saga.tsx"],"names":["all","put","takeEvery","takeLatest","delay","select","ASYNC_DECREASE","ASYNC_INCREASE","DECREASE","INCREASE","asyncIncreaseGen","number","state","Counter","console","log","type","asyncDecreaseGen","counterSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,KAA1C,EAAgFC,MAAhF,QAA8F,oBAA9F;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,QAAzC,EAAmDC,QAAnD,QAAmE,iBAAnE;AAEA;AACA;AACA;;AACA,UAAUC,gBAAV,GAA6B;AAC3B;AACA,QAAMC,MAAM,GAAG,MAAMN,MAAM,CAAEO,KAAD,IAAgBA,KAAK,CAACC,OAAN,CAAcF,MAA/B,CAA3B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,QAAMV,GAAG,CAAC;AACRe,IAAAA,IAAI,EAAEP;AADE,GAAD,CAAT;AAGD;;AAED,UAAUQ,gBAAV,GAA6B;AAC3B,QAAMb,KAAK,CAAC,IAAD,CAAX;AACA,QAAMH,GAAG,CAAC;AACRe,IAAAA,IAAI,EAAER;AADE,GAAD,CAAT;AAGD,C,CAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,OAAO,MAAMU,WAAW,GAAG,aAAa;AACtC,QAAMlB,GAAG,CAAC,CAAC,MAAMG,UAAU,CAACI,cAAD,EAA0BG,gBAA1B,CAAjB,EAA8D,MAAMR,SAAS,CAACI,cAAD,EAA0BW,gBAA1B,CAA7E,CAAD,CAAT;AACD,CAFM","sourcesContent":["import { all, put, takeEvery, takeLatest, delay, takeLeading, take, call, fork, select } from \"redux-saga/effects\";\nimport { ASYNC_DECREASE, ASYNC_INCREASE, DECREASE, INCREASE } from \"./Counter.store\";\n\n/********************************************************************************\n *  Generate Function\n ********************************************************************************/\nfunction* asyncIncreaseGen() {\n  // yield delay(3000);\n  const number = yield select((state: any) => state.Counter.number);\n  console.log(number);\n  yield put({\n    type: INCREASE,\n  });\n}\n\nfunction* asyncDecreaseGen() {\n  yield delay(3000);\n  yield put({\n    type: DECREASE,\n  });\n}\n\n// export function* watchDecrease() {\n//   while (true) {\n//     yield take(ASYNC_DECREASE);\n//     yield fork(asyncDecreaseGen);\n//   }\n// }\n\n/********************************************************************************\n *  watch\n ********************************************************************************/\nexport const counterSaga = function* () {\n  yield all([yield takeLatest(ASYNC_INCREASE as never, asyncIncreaseGen), yield takeEvery(ASYNC_DECREASE as never, asyncDecreaseGen)]);\n};\n"]},"metadata":{},"sourceType":"module"}